name: "Build Protobufs"

on:
  push:
    branches:
      - main
      - '*-dev'
  pull_request:
    branches:
      - main
      - '*-dev'
  schedule:
    - cron: "0 0 * * *"

jobs:
  build:
    strategy:
      matrix:
        # We only test on the oldest version we want to support and latest.
        # We trust that things also work for versions in the middle.
        os: [ubuntu-22.04, ubuntu-latest]
        bazel_version: [7.x, latest]
      fail-fast: false

    runs-on: ${{ matrix.os }}

    env:
      USE_BAZEL_VERSION: ${{ matrix.bazel_version }}
      CACHE_KEY: ${{ matrix.os }}_bazel-${{ matrix.bazel_version }}
      BAZEL_DISK_CACHE: ~/.cache/bazel-disk

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Mount bazel cache
      uses: actions/cache/restore@v4
      with:
        path: |
          ~/.cache/bazel
          ~/.cache/bazel-disk
        key: ${{ env.CACHE_KEY }}-${{ hashFiles('**/*.bazel*', '**/*.bzl') }}
        restore-keys: |
          ${{ env.CACHE_KEY }}

    - name: Save start time
      uses: josStorer/get-current-time@v2
      id: start-time
      with:
        format: X

    - name: Build Protos
      run: |
        cd proto
        bazel build //... --disk_cache=${{ env.BAZEL_DISK_CACHE }} --jobs=$(nproc)
        bazel test //... --test_output=errors --jobs=$(nproc)

    - name: Build Bzlmod Example
      run: |
        cd bazel/example/using-bzlmod
        bazel build //... --disk_cache=${{ env.BAZEL_DISK_CACHE }} --jobs=$(nproc)

    - name: Build Workspace Example (Only for Bazel 7.x)
      if: ${{ env.USE_BAZEL_VERSION == '7.x' }}
      run: |
        cd bazel/example/using-workspace
        bazel build //... --disk_cache=${{ env.BAZEL_DISK_CACHE }} --jobs=$(nproc)

    - name: Save end time
      if: always()
      uses: josStorer/get-current-time@v2
      id: end-time
      with:
        format: X

    - name: Calculate Build Duration
      if: always()
      run: |
        START=${{ steps.start-time.outputs.formattedTime }}
        END=${{ steps.end-time.outputs.formattedTime }}
        DURATION=$(( END - START ))
        echo "duration=$DURATION" | tee "$GITHUB_ENV"

    - name: Save bazel cache
      uses: actions/cache/save@v4
      if: always() && (github.ref_name == 'main' || env.duration > 180)
      with:
        path: |
          ~/.cache/bazel
          ~/.cache/bazel-disk
        key: ${{ env.CACHE_KEY }}-${{ hashFiles('**/*.bazel*', '**/*.bzl') }}-${{ github.run_id }}
